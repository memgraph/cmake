cmake_minimum_required(VERSION 3.10)
project(mgcmake VERSION 0.1.0)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 20)
set(C_STANDARD_REQUIRED ON)
set(CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

add_library(project_options INTERFACE)
include(cmake/Sanitizers.cmake)
enable_sanitizers(project_options)

add_library(project_warnings INTERFACE)
include(cmake/CompilerWarnings.cmake)
set_project_warnings(project_warnings)

include(FetchContent)
include(ExternalProject)

option(MGCMAKE_BUILD_ANNOY       OFF)
option(MGCMAKE_BUILD_ARROW       OFF)
option(MGCMAKE_BUILD_AWS_SDK_CPP OFF)
option(MGCMAKE_BUILD_BOOST       OFF)
option(MGCMAKE_BUILD_FAISS       OFF)
option(MGCMAKE_BUILD_FMT         OFF)
option(MGCMAKE_BUILD_GTEST       OFF)
option(MGCMAKE_BUILD_GBENCH      OFF)
option(MGCMAKE_BUILD_MGCLIENT    OFF)
option(MGCMAKE_BUILD_MGCXX       OFF)
option(MGCMAKE_BUILD_NLOHMANN    OFF)
option(MGCMAKE_BUILD_USEARCH     OFF)
set(MGCMAKE_ALL_MODULES "arrow;aws_sdk_cpp;boost;fmt;mgclient;mgcxx;annoy;nlohmann;usearch;faiss;gtest;gbench")
set(MGCMAKE_ENABLE_MODULES "" CACHE STRING
  "Semicolon-separated list of modules to build (${MGCMAKE_ALL_MODULES}), or \"all\".")
if(MGCMAKE_ENABLE_MODULES STREQUAL "all" )
  set( MGCMAKE_ENABLE_MODULES ${MGCMAKE_ALL_MODULES})
endif()
foreach(module ${MGCMAKE_ENABLE_MODULES})
  string(TOUPPER "${module}" upper_module)
  set(MGCMAKE_BUILD_${upper_module} ON)
endforeach()
foreach(module ${MGCMAKE_ALL_MODULES})
  string(TOUPPER "${module}" upper_module)
  message(STATUS "${module} ${MGCMAKE_BUILD_${upper_module}}")
endforeach()

if(MGCMAKE_BUILD_BOOST)
  include(modules/external-boost.cmake)
endif()

if(MGCMAKE_BUILD_FMT)
  include(modules/external-fmt.cmake)
endif()

if(MGCMAKE_BUILD_MGCLIENT)
  include(modules/external-mgclient.cmake)
endif()

if(MGCMAKE_BUILD_NLOHMANN)
  include(modules/fetch-nlohmann.cmake)
  add_executable(json_example json.cpp)
  target_link_libraries(json_example PRIVATE nlohmann_json::nlohmann_json)
endif()

if(MGCMAKE_BUILD_GBENCH)
  include(modules/fetch-gbenchmark.cmake)
  add_executable(gbenchmark_example gbenchmark.cpp)
  target_link_libraries(gbenchmark_example PRIVATE benchmark::benchmark)
endif()

if(MGCMAKE_BUILD_GTEST)
  include(modules/fetch-gtest.cmake)
  enable_testing()
  add_executable(gtest_example gtest.cpp)
  target_link_libraries(gtest_example gtest gtest_main)
  add_test(NAME gtest_example COMMAND gtest_example)
endif()

if(MGCMAKE_BUILD_MGCXX)
  include(modules/fetch-nlohmann.cmake)
  include(modules/external-mgcxx.cmake)
  add_executable(mgcxx_text_search_example mgcxx_text_search.cpp)
  target_link_libraries(mgcxx_text_search_example PRIVATE nlohmann_json::nlohmann_json mgcxx_text_search tantivy_text_search)
endif()

if(MGCMAKE_BUILD_AWS_SDK_CPP)
  # NOTE: Some build issues on Mac M1, works on Linux.
  include(modules/fetch-aws-sdk-cpp.cmake)
  add_executable(aws_example aws.cpp)
  target_link_libraries(aws_example aws-cpp-sdk-core aws-cpp-sdk-s3)
  include(modules/external-aws-sdk-cpp.cmake)
  ExternalProject_Get_Property(libawscpp-proj install_dir)
  set(AWSSDK_DIR ${install_dir})
  # NOTE: The following doesn't work smootly -> manual target definition required (similar to mgclient).
  # list(APPEND CMAKE_PREFIX_PATH ${AWSSDK_DIR})
  # find_package(AWSSDK REQUIRED COMPONENTS s3)
endif()

if(MGCMAKE_BUILD_ARROW)
  include(modules/external-arrow.cmake)
  add_executable(arrow_example arrow.cpp)
  target_link_libraries(arrow_example PRIVATE libarrow)
  # find_package(Arrow REQUIRED) # https://arrow.apache.org/install/
  # target_link_libraries(arrow_example PRIVATE Arrow::arrow_shared)
endif()

if(MGCMAKE_BUILD_ANNOY)
  include(modules/fetch-annoy.cmake)
  add_executable(vs_annoy vs_annoy.cpp)
  target_include_directories(vs_annoy PRIVATE ${annoy_SOURCE_DIR}/src)
  add_definitions(-DANNOYLIB_MULTITHREADED_BUILD)
endif()

if(MGCMAKE_BUILD_FAISS)
  include(modules/fetch-faiss.cmake)
  add_executable(vs_faiss vs_faiss.cpp)
  # TODO(gitbuda): Make linking of libomp generic.
  target_include_directories(vs_faiss PRIVATE /opt/homebrew/opt/libomp/include)
  target_link_libraries(vs_faiss PRIVATE faiss)
endif()

if(MGCMAKE_BUILD_USEARCH)
  include(modules/fetch-usearch.cmake)
  add_executable(vs_usearch vs_usearch.cpp)
  target_include_directories(vs_usearch PRIVATE ${usearch_SOURCE_DIR}/fp16/include)
  target_include_directories(vs_usearch PRIVATE ${usearch_SOURCE_DIR}/stringzilla/include)
  target_link_libraries(vs_usearch PRIVATE usearch)
endif()
